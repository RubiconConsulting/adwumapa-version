{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/adwumapa.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n//0x4E8019673Bf086D996A08d5C7BB5cA87199DD91f\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\ncontract Adwumapa is Ownable, ReentrancyGuard {\r\n\t// Removed IERC20 public usdcToken;\r\n\r\n\tconstructor() Ownable() {\r\n\t\trequire(msg.sender != address(0), \"Invalid address\");\r\n\t}\r\n\r\n\tevent PaymentProcessed(address indexed recipient, uint256 amount);\r\n\tevent PaymentWithdrawn(address indexed recipient, uint256 amount);\r\n\tevent EmergencyWithdrawal(address indexed to, uint256 amount);\r\n\tevent Deposit(address indexed sender, uint256 amount);\r\n\tevent PaymentReleased(\r\n\t\taddress indexed client,\r\n\t\taddress indexed freelancer,\r\n\t\tuint256 amount\r\n\t);\r\n\tevent ProjectCompleted(\r\n\t\taddress indexed client,\r\n\t\taddress indexed freelancer,\r\n\t\tuint256 amount\r\n\t);\r\n\tevent MilestoneCompleted(\r\n\t\taddress indexed client,\r\n\t\taddress indexed freelancer,\r\n\t\tuint256 milestoneIndex,\r\n\t\tuint256 amount\r\n\t);\r\n\tevent ProjectCreated(address indexed client, address indexed freelancer, uint256 amount);\r\n\tevent MilestoneAdded(address indexed client, uint256 milestoneIndex, uint256 amount);\r\n\r\n\tmapping(address => uint256) public clientBalances;\r\n\tmapping(address => address) public clientFreelancer;\r\n\tmapping(address => uint256[]) public clientMilestones; // New mapping for milestones\r\n\r\n\t// Payment processing functions\r\n\tfunction processPayment(\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external onlyOwner {\r\n\t\trequire(recipient != address(0), \"Invalid recipient address\");\r\n\t\trequire(amount > 0, \"Amount must be greater than 0\");\r\n\t\trequire(\r\n\t\t\taddress(this).balance >= amount,\r\n\t\t\t\"Insufficient contract balance\"\r\n\t\t);\r\n\t\tpayable(recipient).transfer(amount);\r\n\t\temit PaymentProcessed(recipient, amount);\r\n\t}\r\n\r\n\tfunction withdraw(uint256 amount) external onlyOwner {\r\n\t\trequire(amount > 0, \"Amount must be greater than 0\");\r\n\t\trequire(\r\n\t\t\taddress(this).balance >= amount,\r\n\t\t\t\"Insufficient contract balance\"\r\n\t\t);\r\n\t\tpayable(msg.sender).transfer(amount);\r\n\t\temit PaymentWithdrawn(msg.sender, amount);\r\n\t}\r\n\r\n\tfunction emergencyWithdraw(address to, uint256 amount) external onlyOwner {\r\n\t\trequire(to != address(0), \"Invalid recipient address\");\r\n\t\trequire(amount > 0, \"Amount must be greater than 0\");\r\n\t\trequire(\r\n\t\t\taddress(this).balance >= amount,\r\n\t\t\t\"Insufficient contract balance\"\r\n\t\t);\r\n\t\tpayable(to).transfer(amount);\r\n\t\temit EmergencyWithdrawal(to, amount);\r\n\t}\r\n\r\n\t// Function to deposit Ether into the contract\r\n\tfunction deposit(address freelancer) external payable nonReentrant {\r\n\t\trequire(msg.value > 0, \"Amount must be greater than 0\");\r\n\t\trequire(freelancer != address(0), \"Invalid freelancer address\");\r\n\t\tclientBalances[msg.sender] += msg.value;\r\n\t\tclientFreelancer[msg.sender] = freelancer;\r\n\t\temit Deposit(msg.sender, msg.value);\r\n\t}\r\n\r\n\t// Function to mark project as complete and release payment\r\n\tfunction completeProject() external nonReentrant {\r\n\t\taddress freelancer = clientFreelancer[msg.sender];\r\n\t\tuint256 amount = clientBalances[msg.sender];\r\n\r\n\t\trequire(freelancer != address(0), \"No freelancer assigned\");\r\n\t\trequire(amount > 0, \"No funds to release\");\r\n\t\trequire(\r\n\t\t\taddress(this).balance >= amount,\r\n\t\t\t\"Insufficient contract balance\"\r\n\t\t);\r\n\r\n\t\tclientBalances[msg.sender] = 0;\r\n\t\tclientFreelancer[msg.sender] = address(0);\r\n\t\tpayable(freelancer).transfer(amount);\r\n\t\temit ProjectCompleted(msg.sender, freelancer, amount);\r\n\t\temit PaymentReleased(msg.sender, freelancer, amount);\r\n\t}\r\n\r\n\t// Function to release payment when client is satisfied\r\n\tfunction releasePayment(\r\n\t\taddress freelancer,\r\n\t\tuint256 amount\r\n\t) external nonReentrant {\r\n\t\trequire(freelancer != address(0), \"Invalid freelancer address\");\r\n\t\trequire(amount > 0, \"Amount must be greater than 0\");\r\n\t\trequire(\r\n\t\t\taddress(this).balance >= amount,\r\n\t\t\t\"Insufficient contract balance\"\r\n\t\t);\r\n\t\tpayable(freelancer).transfer(amount);\r\n\t\temit PaymentReleased(msg.sender, freelancer, amount);\r\n\t}\r\n\r\n\t// Function to mark milestone as complete and release payment\r\n\tfunction completeMilestone(uint256 milestoneIndex) external nonReentrant {\r\n\t\taddress freelancer = clientFreelancer[msg.sender];\r\n\t\tuint256 amount = clientMilestones[msg.sender][milestoneIndex];\r\n\r\n\t\trequire(freelancer != address(0), \"No freelancer assigned\");\r\n\t\trequire(amount > 0, \"No funds to release\");\r\n\t\trequire(\r\n\t\t\taddress(this).balance >= amount,\r\n\t\t\t\"Insufficient contract balance\"\r\n\t\t);\r\n\r\n\t\tclientMilestones[msg.sender][milestoneIndex] = 0;\r\n\t\tpayable(freelancer).transfer(amount);\r\n\t\temit MilestoneCompleted(msg.sender, freelancer, milestoneIndex, amount);\r\n\t}\r\n\r\n\t// Function to create a new project\r\n\tfunction createProject(address freelancer, uint256 amount) external payable nonReentrant {\r\n\t\trequire(freelancer != address(0), \"Invalid freelancer address\");\r\n\t\trequire(amount > 0, \"Amount must be greater than 0\");\r\n\t\trequire(msg.value == amount, \"Sent value must match the project amount\");\r\n\r\n\t\tclientBalances[msg.sender] += msg.value;\r\n\t\tclientFreelancer[msg.sender] = freelancer;\r\n\t\temit ProjectCreated(msg.sender, freelancer, amount);\r\n\t}\r\n\r\n\t// Function to add milestones\r\n\tfunction addMilestone(uint256 amount) external {\r\n\t\trequire(amount > 0, \"Amount must be greater than 0\");\r\n\t\tclientMilestones[msg.sender].push(amount);\r\n\t\tuint256 milestoneIndex = clientMilestones[msg.sender].length - 1;\r\n\t\temit MilestoneAdded(msg.sender, milestoneIndex, amount);\r\n\t}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}